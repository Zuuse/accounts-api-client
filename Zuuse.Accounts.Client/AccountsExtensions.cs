// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zuuse.Accounts.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Accounts.
    /// </summary>
    public static partial class AccountsExtensions
    {
            /// <summary>
            /// Use to login a user, and retrieve the appropriate security token
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='loginRequest'>
            /// </param>
            public static string PutAccountLogin(this IAccounts operations, LoginRequest loginRequest)
            {
                return operations.PutAccountLoginAsync(loginRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Use to login a user, and retrieve the appropriate security token
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='loginRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> PutAccountLoginAsync(this IAccounts operations, LoginRequest loginRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutAccountLoginWithHttpMessagesAsync(loginRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Use to refresh the expiration on a security token, this should be called
            /// periodically (recommend, once per session).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// Client short name
            /// </param>
            public static string AccountPatchLogin(this IAccounts operations, string client)
            {
                return operations.AccountPatchLoginAsync(client).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Use to refresh the expiration on a security token, this should be called
            /// periodically (recommend, once per session).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// Client short name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> AccountPatchLoginAsync(this IAccounts operations, string client, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AccountPatchLoginWithHttpMessagesAsync(client, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Initiates a forgotten password request for a user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='loginRequest'>
            /// </param>
            public static LoginResponse PostForgotPassword(this IAccounts operations, AccountLoginRequest loginRequest)
            {
                return operations.PostForgotPasswordAsync(loginRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Initiates a forgotten password request for a user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='loginRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LoginResponse> PostForgotPasswordAsync(this IAccounts operations, AccountLoginRequest loginRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostForgotPasswordWithHttpMessagesAsync(loginRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the security configuration for the client.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            public static AccountsConfiguration GetRetrieveConfiguration(this IAccounts operations, string client)
            {
                return operations.GetRetrieveConfigurationAsync(client).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the security configuration for the client.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccountsConfiguration> GetRetrieveConfigurationAsync(this IAccounts operations, string client, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRetrieveConfigurationWithHttpMessagesAsync(client, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Change the security configuration for the client.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            /// <param name='configuration'>
            /// </param>
            public static void PostChangeConfiguration(this IAccounts operations, string client, AccountsConfiguration configuration)
            {
                operations.PostChangeConfigurationAsync(client, configuration).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Change the security configuration for the client.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            /// <param name='configuration'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostChangeConfigurationAsync(this IAccounts operations, string client, AccountsConfiguration configuration, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostChangeConfigurationWithHttpMessagesAsync(client, configuration, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Return a list of all user accounts for the client.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// Client short name
            /// </param>
            public static IList<PublicAccount> GetListAccounts(this IAccounts operations, string client)
            {
                return operations.GetListAccountsAsync(client).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return a list of all user accounts for the client.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// Client short name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<PublicAccount>> GetListAccountsAsync(this IAccounts operations, string client, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetListAccountsWithHttpMessagesAsync(client, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new user account within the indicated client.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// Client short name
            /// </param>
            /// <param name='account'>
            /// Details of account to create
            /// </param>
            public static string PostCreateAccount(this IAccounts operations, string client, PublicAccount account)
            {
                return operations.PostCreateAccountAsync(client, account).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new user account within the indicated client.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// Client short name
            /// </param>
            /// <param name='account'>
            /// Details of account to create
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> PostCreateAccountAsync(this IAccounts operations, string client, PublicAccount account, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostCreateAccountWithHttpMessagesAsync(client, account, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve details for a specific user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// Client short name
            /// </param>
            /// <param name='id'>
            /// Id for the account
            /// </param>
            public static void GetRetrieveAccount(this IAccounts operations, string client, string id)
            {
                operations.GetRetrieveAccountAsync(client, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve details for a specific user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// Client short name
            /// </param>
            /// <param name='id'>
            /// Id for the account
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetRetrieveAccountAsync(this IAccounts operations, string client, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetRetrieveAccountWithHttpMessagesAsync(client, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Change details for a specific user.  Ability to change information is
            /// limited by role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// Client short name
            /// </param>
            /// <param name='id'>
            /// Id for the account
            /// </param>
            /// <param name='account'>
            /// Details for account to update
            /// </param>
            public static void PostUpdateAccount(this IAccounts operations, string client, string id, PublicAccount account)
            {
                operations.PostUpdateAccountAsync(client, id, account).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Change details for a specific user.  Ability to change information is
            /// limited by role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// Client short name
            /// </param>
            /// <param name='id'>
            /// Id for the account
            /// </param>
            /// <param name='account'>
            /// Details for account to update
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostUpdateAccountAsync(this IAccounts operations, string client, string id, PublicAccount account, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostUpdateAccountWithHttpMessagesAsync(client, id, account, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Performs a soft-delete of the indicated account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// Client short name
            /// </param>
            /// <param name='id'>
            /// Id for the account
            /// </param>
            public static void DeleteAccount(this IAccounts operations, string client, string id)
            {
                operations.DeleteAccountAsync(client, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Performs a soft-delete of the indicated account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// Client short name
            /// </param>
            /// <param name='id'>
            /// Id for the account
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAccountAsync(this IAccounts operations, string client, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteAccountWithHttpMessagesAsync(client, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Changes the password for the currently logged in user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// Client short name
            /// </param>
            /// <param name='id'>
            /// Id for the account
            /// </param>
            /// <param name='request'>
            /// Confirmation password and new password
            /// </param>
            public static void PostChangePassword(this IAccounts operations, string client, string id, AccountPasswordChangeRequest request)
            {
                operations.PostChangePasswordAsync(client, id, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Changes the password for the currently logged in user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// Client short name
            /// </param>
            /// <param name='id'>
            /// Id for the account
            /// </param>
            /// <param name='request'>
            /// Confirmation password and new password
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostChangePasswordAsync(this IAccounts operations, string client, string id, AccountPasswordChangeRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostChangePasswordWithHttpMessagesAsync(client, id, request, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Resets the password for the currently logged in user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// Client short name
            /// </param>
            /// <param name='id'>
            /// Id for the account
            /// </param>
            public static void PostResetPassword(this IAccounts operations, string client, string id)
            {
                operations.PostResetPasswordAsync(client, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resets the password for the currently logged in user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// Client short name
            /// </param>
            /// <param name='id'>
            /// Id for the account
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostResetPasswordAsync(this IAccounts operations, string client, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostResetPasswordWithHttpMessagesAsync(client, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieve the collection of built-in and custom roles for the client.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            public static RoleCollection GetRetrieveRoles(this IAccounts operations, string client)
            {
                return operations.GetRetrieveRolesAsync(client).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve the collection of built-in and custom roles for the client.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleCollection> GetRetrieveRolesAsync(this IAccounts operations, string client, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRetrieveRolesWithHttpMessagesAsync(client, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Change the list of custom roles for the client, built-in roles are ignored.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            public static void PostUpdateRoles(this IAccounts operations, string client)
            {
                operations.PostUpdateRolesAsync(client).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Change the list of custom roles for the client, built-in roles are ignored.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostUpdateRolesAsync(this IAccounts operations, string client, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostUpdateRolesWithHttpMessagesAsync(client, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
