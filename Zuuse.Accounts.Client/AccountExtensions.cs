// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zuuse.Accounts.Client
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Account.
    /// </summary>
    public static partial class AccountExtensions
    {
            /// <summary>
            /// Use `PUT /{client}/accounts/{id}` endpoint instead
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='registrationRequest'>
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static object PostRegister(this IAccount operations, AccountRegistrationRequest registrationRequest)
            {
                return operations.PostRegisterAsync(registrationRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Use `PUT /{client}/accounts/{id}` endpoint instead
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='registrationRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task<object> PostRegisterAsync(this IAccount operations, AccountRegistrationRequest registrationRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostRegisterWithHttpMessagesAsync(registrationRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Use `GET /{client}/accounts` endpoint instead
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientProjectIds'>
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static object PostGetAccountList(this IAccount operations, ClientProjectIds clientProjectIds)
            {
                return operations.PostGetAccountListAsync(clientProjectIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Use `GET /{client}/accounts` endpoint instead
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientProjectIds'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task<object> PostGetAccountListAsync(this IAccount operations, ClientProjectIds clientProjectIds, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostGetAccountListWithHttpMessagesAsync(clientProjectIds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Old API endpoint, migrate to AccountsController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountRequest'>
            /// </param>
            public static object PostGetAccountDetailsById(this IAccount operations, AccountDetailsByIdRequest accountRequest)
            {
                return operations.PostGetAccountDetailsByIdAsync(accountRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Old API endpoint, migrate to AccountsController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostGetAccountDetailsByIdAsync(this IAccount operations, AccountDetailsByIdRequest accountRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostGetAccountDetailsByIdWithHttpMessagesAsync(accountRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Old API endpoint, migrate to AccountsController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='loginRequest'>
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static LoginResponse PostAccountLogin(this IAccount operations, AccountLoginRequest loginRequest)
            {
                return operations.PostAccountLoginAsync(loginRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Old API endpoint, migrate to AccountsController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='loginRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task<LoginResponse> PostAccountLoginAsync(this IAccount operations, AccountLoginRequest loginRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostAccountLoginWithHttpMessagesAsync(loginRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Old API endpoint, migrate to AccountsController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static LoginResponse PostReLogin(this IAccount operations)
            {
                return operations.PostReLoginAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Old API endpoint, migrate to AccountsController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LoginResponse> PostReLoginAsync(this IAccount operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostReLoginWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Use `POST {client}/accounts/{id}/password` endpoint instead
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='changePasswordRequest'>
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static object PostChangePassword(this IAccount operations, ChangePasswordRequest changePasswordRequest)
            {
                return operations.PostChangePasswordAsync(changePasswordRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Use `POST {client}/accounts/{id}/password` endpoint instead
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='changePasswordRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task<object> PostChangePasswordAsync(this IAccount operations, ChangePasswordRequest changePasswordRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostChangePasswordWithHttpMessagesAsync(changePasswordRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
