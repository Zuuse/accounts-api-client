// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zuuse.Accounts.Client.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class AccountsConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the AccountsConfiguration class.
        /// </summary>
        public AccountsConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AccountsConfiguration class.
        /// </summary>
        /// <param name="passwordStrengthType">Possible values include:
        /// 'Unknown', 'Entropy', 'Rules'</param>
        public AccountsConfiguration(string client = default(string), string passwordStrengthType = default(string), int? bitsEntropy = default(int?), int? tokenExpiration = default(int?), bool? requiresLowercase = default(bool?), bool? requiresUppercase = default(bool?), bool? requiresDigits = default(bool?), bool? requiresSymbols = default(bool?), bool? requiresPasswordHistory = default(bool?), bool? requiresMaximumPasswordAge = default(bool?), bool? requiresMinimumPasswordLength = default(bool?), int? passwordHistory = default(int?), int? maximumPasswordAge = default(int?), int? minimumPasswordLength = default(int?))
        {
            Client = client;
            PasswordStrengthType = passwordStrengthType;
            BitsEntropy = bitsEntropy;
            TokenExpiration = tokenExpiration;
            RequiresLowercase = requiresLowercase;
            RequiresUppercase = requiresUppercase;
            RequiresDigits = requiresDigits;
            RequiresSymbols = requiresSymbols;
            RequiresPasswordHistory = requiresPasswordHistory;
            RequiresMaximumPasswordAge = requiresMaximumPasswordAge;
            RequiresMinimumPasswordLength = requiresMinimumPasswordLength;
            PasswordHistory = passwordHistory;
            MaximumPasswordAge = maximumPasswordAge;
            MinimumPasswordLength = minimumPasswordLength;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Client")]
        public string Client { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Unknown', 'Entropy', 'Rules'
        /// </summary>
        [JsonProperty(PropertyName = "PasswordStrengthType")]
        public string PasswordStrengthType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BitsEntropy")]
        public int? BitsEntropy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TokenExpiration")]
        public int? TokenExpiration { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RequiresLowercase")]
        public bool? RequiresLowercase { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RequiresUppercase")]
        public bool? RequiresUppercase { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RequiresDigits")]
        public bool? RequiresDigits { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RequiresSymbols")]
        public bool? RequiresSymbols { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RequiresPasswordHistory")]
        public bool? RequiresPasswordHistory { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RequiresMaximumPasswordAge")]
        public bool? RequiresMaximumPasswordAge { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RequiresMinimumPasswordLength")]
        public bool? RequiresMinimumPasswordLength { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PasswordHistory")]
        public int? PasswordHistory { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MaximumPasswordAge")]
        public int? MaximumPasswordAge { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MinimumPasswordLength")]
        public int? MinimumPasswordLength { get; set; }

    }
}
