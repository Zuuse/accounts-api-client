// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zuuse.Accounts.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class PublicAccount
    {
        /// <summary>
        /// Initializes a new instance of the PublicAccount class.
        /// </summary>
        public PublicAccount()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PublicAccount class.
        /// </summary>
        public PublicAccount(string id, string identifier, string displayName, string clientShortName, string email = default(string), string phone = default(string), RoleCollection roles = default(RoleCollection), System.DateTime? fromProperty = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), IList<string> tags = default(IList<string>))
        {
            Id = id;
            Identifier = identifier;
            DisplayName = displayName;
            Email = email;
            Phone = phone;
            ClientShortName = clientShortName;
            Roles = roles;
            FromProperty = fromProperty;
            To = to;
            Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Identifier")]
        public string Identifier { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DisplayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Email")]
        public string Email { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Phone")]
        public string Phone { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ClientShortName")]
        public string ClientShortName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Roles")]
        public RoleCollection Roles { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "From")]
        public System.DateTime? FromProperty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "To")]
        public System.DateTime? To { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Tags")]
        public IList<string> Tags { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (Identifier == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Identifier");
            }
            if (DisplayName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DisplayName");
            }
            if (ClientShortName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ClientShortName");
            }
            if (Identifier != null)
            {
                if (Identifier.Length > 24)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Identifier", 24);
                }
                if (Identifier.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Identifier", 0);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(Identifier, "[a-zA-Z0-9]*"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Identifier", "[a-zA-Z0-9]*");
                }
            }
            if (Email != null)
            {
                if (Email.Length > 254)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Email", 254);
                }
                if (Email.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Email", 0);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(Email, "^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Email", "^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$");
                }
            }
            if (Phone != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(Phone, "^\\+?[0-9\\(\\)\\-\\.\\s]{0,25}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Phone", "^\\+?[0-9\\(\\)\\-\\.\\s]{0,25}$");
                }
            }
            if (ClientShortName != null)
            {
                if (ClientShortName.Length > 24)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ClientShortName", 24);
                }
                if (ClientShortName.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "ClientShortName", 0);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(ClientShortName, "[a-z][a-z0-9]*"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "ClientShortName", "[a-z][a-z0-9]*");
                }
            }
        }
    }
}
