// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zuuse.Accounts.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class ClientModel
    {
        /// <summary>
        /// Initializes a new instance of the ClientModel class.
        /// </summary>
        public ClientModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ClientModel class.
        /// </summary>
        /// <param name="legacyApiLocation">Possible values include: 'CT4',
        /// 'Azure', 'OnPremise'</param>
        /// <param name="pulseAuthentication">Possible values include: 'None',
        /// 'OnPremise', 'DaaS'</param>
        public ClientModel(string identifier, string displayName, string id = default(string), string primaryContact = default(string), string defaultContactEmail = default(string), int? legacyClientId = default(int?), int? legacyProjectId = default(int?), string legacyApiLocation = default(string), Applications licensedApplications = default(Applications), string pulseAuthentication = default(string))
        {
            Id = id;
            Identifier = identifier;
            DisplayName = displayName;
            PrimaryContact = primaryContact;
            DefaultContactEmail = defaultContactEmail;
            LegacyClientId = legacyClientId;
            LegacyProjectId = legacyProjectId;
            LegacyApiLocation = legacyApiLocation;
            LicensedApplications = licensedApplications;
            PulseAuthentication = pulseAuthentication;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Identifier")]
        public string Identifier { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DisplayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PrimaryContact")]
        public string PrimaryContact { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DefaultContactEmail")]
        public string DefaultContactEmail { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LegacyClientId")]
        public int? LegacyClientId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LegacyProjectId")]
        public int? LegacyProjectId { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'CT4', 'Azure', 'OnPremise'
        /// </summary>
        [JsonProperty(PropertyName = "LegacyApiLocation")]
        public string LegacyApiLocation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LicensedApplications")]
        public Applications LicensedApplications { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'None', 'OnPremise', 'DaaS'
        /// </summary>
        [JsonProperty(PropertyName = "PulseAuthentication")]
        public string PulseAuthentication { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Identifier == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Identifier");
            }
            if (DisplayName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DisplayName");
            }
            if (Identifier != null)
            {
                if (Identifier.Length > 24)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Identifier", 24);
                }
                if (Identifier.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Identifier", 0);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(Identifier, "[a-z][a-z0-9]*"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Identifier", "[a-z][a-z0-9]*");
                }
            }
            if (PrimaryContact != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(PrimaryContact, "^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "PrimaryContact", "^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$");
                }
            }
            if (DefaultContactEmail != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(DefaultContactEmail, "^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "DefaultContactEmail", "^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$");
                }
            }
        }
    }
}
