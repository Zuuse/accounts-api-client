// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zuuse.Accounts.Client
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ExternalAccount.
    /// </summary>
    public static partial class ExternalAccountExtensions
    {
            /// <summary>
            /// The old API for access to external accounts.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='registrationRequest'>
            /// </param>
            public static object PostRegister(this IExternalAccount operations, ExternalAccountRegistrationRequest registrationRequest)
            {
                return operations.PostRegisterAsync(registrationRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The old API for access to external accounts.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='registrationRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostRegisterAsync(this IExternalAccount operations, ExternalAccountRegistrationRequest registrationRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostRegisterWithHttpMessagesAsync(registrationRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The old API for access to external accounts.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientProjectIds'>
            /// </param>
            public static object PostGetExternalAccountList(this IExternalAccount operations, ClientProjectIds clientProjectIds)
            {
                return operations.PostGetExternalAccountListAsync(clientProjectIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The old API for access to external accounts.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientProjectIds'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostGetExternalAccountListAsync(this IExternalAccount operations, ClientProjectIds clientProjectIds, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostGetExternalAccountListWithHttpMessagesAsync(clientProjectIds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The old API for access to external accounts.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountRequest'>
            /// </param>
            public static object PostGetExternalAccountDetailsById(this IExternalAccount operations, ExternalAccountDetailsByIdRequest accountRequest)
            {
                return operations.PostGetExternalAccountDetailsByIdAsync(accountRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The old API for access to external accounts.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostGetExternalAccountDetailsByIdAsync(this IExternalAccount operations, ExternalAccountDetailsByIdRequest accountRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostGetExternalAccountDetailsByIdWithHttpMessagesAsync(accountRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The old API for access to external accounts.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='loginRequest'>
            /// </param>
            public static LoginResponse PostExternalAccountLogin(this IExternalAccount operations, PinLoginRequest loginRequest)
            {
                return operations.PostExternalAccountLoginAsync(loginRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The old API for access to external accounts.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='loginRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LoginResponse> PostExternalAccountLoginAsync(this IExternalAccount operations, PinLoginRequest loginRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostExternalAccountLoginWithHttpMessagesAsync(loginRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
